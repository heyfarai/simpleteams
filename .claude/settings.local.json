{
  "permissions": {
    "allow": [
      "Bash(pnpm run lint:*)",
      "Bash(pnpm list:*)",
      "Bash(pnpm run build:*)",
      "WebSearch",
      "Bash(cat:*)",
      "Bash(npm install:*)",
      "Bash(pnpm install:*)",
      "Bash(env)",
      "Bash(node:*)",
      "Bash(pnpm run:*)",
      "Bash(npm run build:*)",
      "Read(//Users/farai/Downloads/**)",
      "Bash(stripe auth)",
      "Bash(stripe login:*)",
      "Bash(stripe config:*)",
      "Bash(stripe products create:*)",
      "Bash(stripe prices create:*)",
      "Bash(pnpm dev:*)",
      "Bash(compgen:*)",
      "Bash(supabase:*)",
      "Bash(stripe events resend:*)",
      "Read(//Users/farai/Dev/tryouts-next/**)",
      "Bash(pnpm add:*)",
      "Bash(git add:*)",
      "Bash(echo:*)",
      "Bash(claude mcp:*)",
      "Bash(npx supabase db remote exec:*)",
      "Bash(NEXT_PUBLIC_SUPABASE_URL=https://qrvmoeoifjszbujnllbu.supabase.co SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFydm1vZW9pZmpzemJ1am5sbGJ1Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzY4NTA4NiwiZXhwIjoyMDczMjYxMDg2fQ.YnoNn-SVjGkkEBBbd6zpa5cTSRJQ7NxY_2aAnCRP3es node check-registrations.js)",
      "mcp__ide__getDiagnostics",
      "Bash(NEXT_PUBLIC_SUPABASE_URL=https://qrvmoeoifjszbujnllbu.supabase.co SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFydm1vZW9pZmpzemJ1am5sbGJ1Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzY4NTA4NiwiZXhwIjoyMDczMjYxMDg2fQ.YnoNn-SVjGkkEBBbd6zpa5cTSRJQ7NxY_2aAnCRP3es node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\nconst supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY);\n\nasync function checkLatestRegistration() {\n  try {\n    // Get the latest team registration\n    const { data: teams, error } = await supabase\n      .from(''teams'')\n      .select(''*'')\n      .order(''created_at'', { ascending: false })\n      .limit(1);\n    \n    if (error) throw error;\n    \n    if (teams && teams.length > 0) {\n      const team = teams[0];\n      console.log(''üìã Latest Team Registration:'');\n      console.log(''============================'');\n      console.log(''Team ID:'', team.id);\n      console.log(''Team Name:'', team.name);\n      console.log(''Contact Email:'', team.contact_email);\n      console.log(''Package:'', team.selected_package);\n      console.log(''Status:'', team.status);\n      console.log(''Payment Status:'', team.payment_status);\n      console.log(''User ID:'', team.user_id);\n      console.log(''City:'', team.city);\n      console.log(''Region:'', team.region);\n      console.log(''Division Preference:'', team.division_preference);\n      console.log(''Primary Contact:'', team.primary_contact_name, ''('' + team.primary_contact_email + '')'');\n      console.log(''Head Coach:'', team.head_coach_name, ''('' + team.head_coach_email + '')'');\n      console.log(''Created:'', new Date(team.created_at).toLocaleString());\n      console.log('''');\n      \n      // Get payment record for this team\n      const { data: payments, error: payError } = await supabase\n        .from(''team_payments'')\n        .select(''*'')\n        .eq(''team_id'', team.id)\n        .order(''created_at'', { ascending: false })\n        .limit(1);\n      \n      if (payError) {\n        console.log(''‚ö†Ô∏è Payment query error:'', payError);\n      } else if (payments && payments.length > 0) {\n        const payment = payments[0];\n        console.log(''üí≥ Associated Payment Record:'');\n        console.log(''=============================='');\n        console.log(''Payment ID:'', payment.id);\n        console.log(''Amount:'', ''$'' + (payment.amount / 100).toFixed(2), payment.currency);\n        console.log(''Status:'', payment.status);\n        console.log(''Type:'', payment.payment_type);\n        console.log(''Description:'', payment.description);\n        console.log(''Stripe Session ID:'', payment.stripe_session_id || ''Not set'');\n        console.log(''Created:'', new Date(payment.created_at).toLocaleString());\n      } else {\n        console.log(''‚ö†Ô∏è No payment record found for this team'');\n      }\n    } else {\n      console.log(''‚ùå No team registrations found'');\n    }\n  } catch (error) {\n    console.error(''Error:'', error);\n  }\n  process.exit(0);\n}\n\ncheckLatestRegistration();\n\")"
    ],
    "deny": [],
    "ask": []
  }
}